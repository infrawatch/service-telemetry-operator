---
# For more information about this block and understanding what is going on here, see comments:
# * https://github.com/infrawatch/service-telemetry-operator/pull/371#discussion_r972387977
# * https://github.com/infrawatch/service-telemetry-operator/pull/371#discussion_r977045766
- block:
  - name: Create self-signed interconnect issuer
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          selfSigned: {}

  - name: Create self-signed interconnect certificate
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          duration: '{{ servicetelemetry_vars.transports.qdr.certificates.ca_cert_duration }}'
          commonName: "{{ ansible_operator_meta.name }}-interconnect.{{ ansible_operator_meta.namespace }}.svc.cluster.local"
          isCA: true
          issuerRef:
            name: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"
          secretName: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"


  - name: Create default CA interconnect issuer using self-signed interconnect certificate
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-ca"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          ca:
            secretName: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"

  - name: Create OpenStack CA certificate using self-signed interconnect certificate
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-openstack-ca"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          duration: '{{ servicetelemetry_vars.transports.qdr.certificates.ca_cert_duration }}'
          commonName: "{{ ansible_operator_meta.name }}-interconnect-openstack-ca"
          isCA: true
          issuerRef:
            name: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"
          secretName: "{{ ansible_operator_meta.name }}-interconnect-openstack-ca"

  - name: Create OpenStack credentials certificate using self-signed interconnect certificate
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-openstack-credentials"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          duration: '{{ servicetelemetry_vars.transports.qdr.certificates.endpoint_cert_duration }}'
          commonName: "{{ ansible_operator_meta.name }}-interconnect"
          dnsNames:
            - "{{ ansible_operator_meta.name }}-interconnect.{{ ansible_operator_meta.namespace }}.svc.cluster.local"
          issuerRef:
            name: "{{ ansible_operator_meta.name }}-interconnect-ca"
          secretName: "{{ ansible_operator_meta.name }}-interconnect-openstack-credentials"

  - name: Create inter-router CA issuer
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-inter-router-ca"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          ca:
            secretName: "{{ ansible_operator_meta.name }}-interconnect-inter-router-ca"

  - name: Create inter-router CA certificate
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-inter-router-ca"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          duration: '{{ servicetelemetry_vars.transports.qdr.certificates.ca_cert_duration }}'
          commonName: "{{ ansible_operator_meta.name }}-interconnect-inter-router-ca"
          isCA: true
          issuerRef:
            name: "{{ ansible_operator_meta.name }}-interconnect-selfsigned"
          secretName: "{{ ansible_operator_meta.name }}-interconnect-inter-router-ca"

  - name: Create inter-router credentials certificate
    k8s:
      state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
      definition:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: "{{ ansible_operator_meta.name }}-interconnect-inter-router-credentials"
          namespace: "{{ ansible_operator_meta.namespace }}"
        spec:
          duration: '{{ servicetelemetry_vars.transports.qdr.certificates.endpoint_cert_duration }}'
          commonName: "{{ ansible_operator_meta.name }}-interconnect"
          dnsNames:
            - "{{ ansible_operator_meta.name }}-interconnect.{{ ansible_operator_meta.namespace }}.svc.cluster.local"
          issuerRef:
            name: "{{ ansible_operator_meta.name }}-interconnect-inter-router-ca"
          secretName: "{{ ansible_operator_meta.name }}-interconnect-inter-router-credentials"
  when: interconnect_manifest is not defined

- name: Create Interconnect SASL ConfigMap
  k8s:
    state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: "{{ ansible_operator_meta.name }}-interconnect-sasl-config"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          application: "{{ ansible_operator_meta.name }}-interconnect"
          interconnect_cr: "{{ ansible_operator_meta.name }}-interconnect"
      data:
        qdrouterd.conf: |
          pwcheck_method: auxprop
          auxprop_plugin: sasldb
          sasldb_path: /tmp/qdrouterd.sasldb
  when: interconnect_manifest is not defined

- when:
  - servicetelemetry_vars.transports.qdr.auth == "basic"
  block:
    - name: Get QDR BasicAuth secret
      k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ ansible_operator_meta.name }}-interconnect-users"
        namespace: "{{ ansible_operator_meta.namespace }}"
      register: _qdr_basicauth_object

    - when:
      - _qdr_basicauth_object.resources[0] is defined and _qdr_basicauth_object.resources[0].metadata.labels.stf_one_time_upgrade is not defined
      block:
        # Because https://github.com/interconnectedcloud/qdr-operator/blob/576d2b33dac71437ea2b165caaaf6413220767fe/pkg/controller/interconnect/interconnect_controller.go#L634
        - name: Perform a one-time upgrade to the default generated password for QDR BasicAuth
          k8s:
            definition:
              kind: Secret
              apiVersion: v1
              metadata:
                name: "{{ ansible_operator_meta.name }}-interconnect-users"
                namespace: "{{ ansible_operator_meta.namespace }}"
                labels:
                  stf_one_time_upgrade: "{{ lookup('pipe', 'date +%s') }}"
              stringData:
                guest: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"

        # label_selectors on the k8s object need kubernetes.core>=2.2.0
        - name: Get the list of QDR pods
          k8s_info:
            api_version: v1
            kind: Pod
            namespace: "{{ ansible_operator_meta.namespace }}"
            label_selectors:
              - application={{ ansible_operator_meta.name }}-interconnect
          register: _qdr_pod

        - name: Restart QDR pods to pick up new password
          k8s:
            state: absent
            api_version: v1
            kind: Pod
            namespace: "{{ ansible_operator_meta.namespace }}"
            name: "{{ item.metadata.name }}"
          loop: "{{ _qdr_pod.resources }}"

- name: Set default Interconnect manifest
  set_fact:
    interconnect_manifest: |
      apiVersion: interconnectedcloud.github.io/v1alpha1
      kind: Interconnect
      metadata:
        name: '{{ ansible_operator_meta.name }}-interconnect'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        deploymentPlan:
          size: {{ servicetelemetry_vars.transports.qdr.deployment_size }}
          role: interior
          livenessPort: 8888
          placement: AntiAffinity
        addresses:
          - distribution: closest
            prefix: closest
          - distribution: multicast
            prefix: multicast
          - distribution: closest
            prefix: unicast
          - distribution: closest
            prefix: exclusive
          - distribution: multicast
            prefix: broadcast
          - distribution: multicast
            prefix: collectd
          - distribution: multicast
            prefix: ceilometer
        edgeListeners:
          - expose: true
            port: 5671
      {% if servicetelemetry_vars.transports.qdr.auth == "basic" %}
            saslMechanisms: PLAIN
            authenticatePeer: true
      {% elif servicetelemetry_vars.transports.qdr.auth == "none" %}
            saslMechanisms: ANONYMOUS
      {% endif %}
            sslProfile: openstack
          - port: 5673
            linkCapacity: 25000
        interRouterListeners:
          - authenticatePeer: true
            expose: false
            port: 55671
            saslMechanisms: EXTERNAL
            sslProfile: inter-router
        listeners:
          - port: 5672
            host: 127.0.0.1
          - expose: {{ servicetelemetry_vars.transports.qdr.web.enabled }}
            http: true
            port: 8672
        sslProfiles:
          - caCert: {{ ansible_operator_meta.name }}-interconnect-openstack-ca
            credentials: {{ ansible_operator_meta.name }}-interconnect-openstack-credentials
            generateCaCert: true
            generateCredentials: true
            name: openstack
          - caCert: {{ ansible_operator_meta.name }}-interconnect-inter-router-ca
            credentials: {{ ansible_operator_meta.name }}-interconnect-inter-router-credentials
            generateCaCert: false
            generateCredentials: false
            mutualAuth: true
            name: inter-router
  when: interconnect_manifest is not defined

- name: Create QDR instance
  k8s:
    state: '{{ "present" if servicetelemetry_vars.transports.qdr.enabled else "absent" }}'
    definition:
      '{{ interconnect_manifest }}'

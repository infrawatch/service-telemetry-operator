- name: Construct oauth redirect reference
  set_fact:
    grafana_oauth_redir_ref:
      kind: OAuthRedirectReference
      apiVersion: v1
      reference:
        kind: Route
        name: 'grafana-route'

- name: Check for existing grafana htpasswd secret
  no_log: true
  k8s_info:
    api_version: v1
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-grafana-htpasswd'
  register: grafana_htpasswd_secret

- block:
    - name: Parse current Grafana htpasswd salt from secret
      no_log: true
      set_fact:
        grafana_htpasswd_salt: "{{ ((grafana_htpasswd_secret.resources[0].data.auth | b64decode).split('$')[-1])[0:22] }}"
  rescue:
    - name: Generate initial Grafana htpasswd bcrypt string from grafana.admin_password
      no_log: true
      set_fact:
        init_grafana_htpasswd_bcrypt_string: "{{ (servicetelemetry_vars.graphing.grafana.admin_password | password_hash('bcrypt') | replace('$2b$','$2y$', 1)) }}"

    - name: Read newly generated Grafana htpasswd salt
      no_log: true
      set_fact:
        grafana_htpasswd_salt: "{{ (init_grafana_htpasswd_bcrypt_string.split('$')[-1])[0:22] }}"
  always:
    - name: Generate Grafana htpasswd bcrypt string from grafana.adminPassword using salt
      no_log: true
      set_fact:
        grafana_htpasswd_bcrypt_string: "{{ (servicetelemetry_vars.graphing.grafana.admin_password | password_hash('bcrypt', grafana_htpasswd_salt) | replace('$2b$','$2y$', 1)) }}"

    - name: Generate Grafana auth string from grafana.adminUser and grafana_htpasswd_bcrypt_string
      no_log: true
      set_fact:
        grafana_htpasswd_auth_string: "{{ servicetelemetry_vars.graphing.grafana.admin_user }}:{{ grafana_htpasswd_bcrypt_string }}"

- name: Create or patch htpasswd secret for grafana admin
  no_log: false
  k8s:
    definition:
      api_version: v1
      kind: Secret
      metadata:
        name: '{{ ansible_operator_meta.name }}-grafana-htpasswd'
        namespace: '{{ ansible_operator_meta.namespace }}'
      type: Opaque
      stringData:
        auth: '{{ grafana_htpasswd_auth_string }}'

- name: Lookup template
  debug:
    msg: "{{ lookup('template', './manifest_grafana.j2') | from_yaml }}"

- name: Set default Grafana manifest
  set_fact:
    grafana_manifest: "{{ lookup('template', './manifest_grafana.j2') | from_yaml }}"
  when: grafana_manifest is not defined

- name: Create an instance of Grafana
  k8s:
    state: '{{ "present" if servicetelemetry_vars.graphing.enabled else "absent" }}'
    definition:
      '{{ grafana_manifest }}'

- when: servicetelemetry_vars.graphing.enabled
  block:
    - when: servicetelemetry_vars.backends.metrics.prometheus.enabled
      block:
        - name: Retrieve configmap for OAUTH CA certs
          k8s_info:
            api_version: v1
            kind: ConfigMap
            name: serving-certs-ca-bundle
            namespace: '{{ ansible_operator_meta.namespace }}'
          register: serving_certs_ca

        - name: Retrieve prometheus secret
          k8s_info:
            api_version: v1
            kind: Secret
            namespace: '{{ ansible_operator_meta.namespace }}'
            name: '{{ ansible_operator_meta.name }}-prometheus-htpasswd'
          register: prometheus_secret

        - name: Decode prometheus password
          no_log: true
          set_fact:
            prom_basicauth_passwd: '{{ prometheus_secret.resources[0].data.password | b64decode }}'

    # Lookup existing datasources
    - name: Remove legacy datasources
      k8s:
        api_version: integreatly.org/v1alpha1
        name: '{{ ansible_operator_meta.name }}-ds-prometheus'
        kind: GrafanaDataSource
        namespace: '{{ ansible_operator_meta.namespace }}'
        state: absent

    # NOTE: this can fail if you enable grafana without prometheus due to missing resources referenced in the template
    - name: Set datasources
      set_fact:
        ds_manifest: "{{ lookup('template', './manifest_grafana_ds.j2') | from_yaml }}"
      when: ds_manifest is not defined

    - name: Create the datasources
      k8s:
        state: '{{ "present" if servicetelemetry_vars.graphing.enabled else "absent" }}'
        definition:
          '{{ ds_manifest }}'

    - name: Load Cloud Overview Dashboard
      k8s:
        state: '{{ "present" if servicetelemetry_vars.graphing.grafana.dashboards.enabled else "absent" }}'
        definition:
          apiVersion: integreatly.org/v1alpha1
          kind: GrafanaDashboard
          metadata:
            labels:
              app: grafana
              stf_owner: "{{ ansible_operator_meta.name }}"
            name: rhos-cloud-dashboard-1
            namespace: "{{ ansible_operator_meta.namespace }}"
          spec:
            name: rhos-cloud-dashboard.json
            plugins:
              - name: grafana-polystat-panel
                version: "1.2.11"
            json: |
              {{ lookup('file', 'rhos-cloud-dashboard.json') | string }}

    - name: Load Infrastructure Overview Dashboard
      k8s:
        state: '{{ "present" if servicetelemetry_vars.graphing.grafana.dashboards.enabled else "absent" }}'
        definition:
          apiVersion: integreatly.org/v1alpha1
          kind: GrafanaDashboard
          metadata:
            labels:
              app: grafana
              stf_owner: "{{ ansible_operator_meta.name }}"
            name: rhos-dashboard-1
            namespace: "{{ ansible_operator_meta.namespace }}"
          spec:
            name: rhos-dashboard.json
            json: |
              {{ lookup('file', 'rhos-dashboard.json') | string }}

    - name: Load Memcached Dashboard
      k8s:
        state: '{{ "present" if servicetelemetry_vars.graphing.grafana.dashboards.enabled else "absent" }}'
        definition:
          apiVersion: integreatly.org/v1alpha1
          kind: GrafanaDashboard
          metadata:
            labels:
              app: grafana
              stf_owner: "{{ ansible_operator_meta.name }}"
            name: memcached-dashboard-1
            namespace: "{{ ansible_operator_meta.namespace }}"
          spec:
            name: memcached-dashboard.json
            json: |
              {{ lookup('file', 'memcached-dashboard.json') | string }}

    - name: Load Virtual Machine View Dashboard
      k8s:
        state: '{{ "present" if servicetelemetry_vars.graphing.grafana.dashboards.enabled else "absent" }}'
        definition:
          apiVersion: integreatly.org/v1alpha1
          kind: GrafanaDashboard
          metadata:
            labels:
              app: grafana
              stf_owner: "{{ ansible_operator_meta.name }}"
            name: virtual-machine-dashboard-1
            namespace: "{{ ansible_operator_meta.namespace }}"
          spec:
            name: virtual-machine-view.json
            json: |
              {{ lookup('file', 'virtual-machine-view.json') | string }}

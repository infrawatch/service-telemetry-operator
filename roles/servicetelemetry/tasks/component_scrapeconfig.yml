- name: Look up prometheus-stf SA to get auth secret name
  k8s_info:
    api_version: v1
    kind: ServiceAccount
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: prometheus-stf
  register: service_account

- name: Look up auth secret to get token secret name
  k8s_info:
    api_version: v1
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ service_account.resources[0].secrets[0].name }}'
  register: auth_secret

- name: Create SG-specific Service Monitor manifest
  set_fact:
    sg_specific_scrapeconfig_manifest: |
      apiVersion: {{ prometheus_operator_api_string | replace("/v1","/v1alpha1") }}
      kind: ScrapeConfig
      metadata:
        labels:
          app: smart-gateway
        name: '{{ this_smartgateway }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        authorization:
          type: bearer
          credentials:
            name: '{{ auth_secret.resources[0].metadata.annotations['openshift.io/token-secret.name'] }}'
            key: token
        metricRelabelings:
          - action: labeldrop
            regex: pod
            sourcelabels: []
          - action: labeldrop
            regex: namespace
            sourcelabels: []
          - action: labeldrop
            regex: instance
            sourcelabels: []
          - action: labeldrop
            regex: job
            sourcelabels: []
          - action: labeldrop
            regex: publisher
            sourcelabels: []
        scheme: HTTPS
        scrapeInterval: {{ servicetelemetry_vars.backends.metrics.prometheus.scrape_interval }}
        staticConfigs:
        - targets:
          - '{{ this_smartgateway }}.{{ ansible_operator_meta.namespace }}.svc:8083'
        tlsConfig:
          ca:
            configMap:
              name: serving-certs-ca-bundle
              key: service-ca.crt
          serverName: '{{ this_smartgateway }}.{{ ansible_operator_meta.namespace }}.svc'

- name: Create ScrapeConfig to scrape Smart Gateway
  k8s:
    state: '{{ "present" if servicetelemetry_vars.backends.metrics.prometheus.enabled else "absent" }}'
    definition:
      '{{ sg_specific_scrapeconfig_manifest }}'

- name: Create additional ScrapeConfig if provided
  k8s:
    state: '{{ "present" if servicetelemetry_vars.backends.metrics.prometheus.enabled else "absent" }}'
    definition:
      '{{ scrapeconfig_manifest }}'
  when: scrapeconfig_manifest is defined

- name: Create additional ServiceMonitor if provided (legacy)
  k8s:
    state: '{{ "present" if servicetelemetry_vars.backends.metrics.prometheus.enabled else "absent" }}'
    definition:
      '{{ servicemonitor_manifest }}'
  when: servicemonitor_manifest is defined

- name: Remove (legacy) default ServiceMonitors
  k8s:
    state: absent
    api_version: '{{ prometheus_operator_api_string }}'
    kind: ServiceMonitor
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ this_smartgateway }}'
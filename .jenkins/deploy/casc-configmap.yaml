apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-casc
  namespace: ci
data:
  casc.yaml: |
    unclassified:
      location:
        url: "https://${JENKINS_URL}"
    jenkins:
      numExecutors: 1
      remotingSecurity:
        enabled: true

      # permissions for anonymous - revisit is moved to public internet rather than behind firewall
      authorizationStrategy:
        globalMatrix:
          permissions:
          - "Job/Build:anonymous"
          - "Job/Discover:anonymous"
          - "Job/Read:anonymous"
          - "Job/Cancel:anonymous"
          - "Overall/Read:anonymous"
      clouds:
      - kubernetes:
          name: kubernetes
          containerCapStr: 100
          containerCap: 1
          jenkinsUrl: "http://jenkins:8080/"
          templates:
          - name: ocp-agent
            label: ocp-agent
            namespace: ci
            serviceAccount: jenkins
            containers:
            - name: exec
              workingDir: "/home/jenkins/agent"
              image: image-registry.openshift-image-registry.svc:5000/ci/jenkins-agent:latest
              alwaysPullImage: true
              command: sleep
              args: infinity

    security:
      queueItemAuthenticator:
        authenticators:
        - global:
            strategy: triggeringUsersAuthorizationStrategy

    # organization config
    jobs:
      - script: >
          organizationFolder('${GH_ORG}') {
            description("${GH_ORG} GitHub Organization")
            displayName('${GH_ORG}')

            organizations {
              github {
                apiUri("https://api.github.com")
                repoOwner("${GH_ORG}")
                credentialsId("github-app-key")
              }
            }
            configure { node ->
                def traits = node / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits

                // Discover branches
                traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                    strategyId(1)
                    // Values
                    //  1 : Exclude branches that are also filed as PRs
                    //  2 : Only branches that are also filed as PRs
                    //  3 : All branches
                }
                // Discover pull requests from origin
                traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                    strategyId(1)
                    // Values
                    // 1 : Merging the pull request with the current target branch revision
                    // 2 : The current pull request revision
                    // 3 : Both the current pull request revision and the pull request merged with the current target branch revision
                }
                // Discover pull requests from forks
                traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                    strategyId(1)
                    // Values
                    // 1 : Merging the pull request with the current target branch revision
                    // 2 : The current pull request revision
                    // 3 : Both the current pull request revision and the pull request merged with the current target branch revision

                    trustID('1')
                    // Values
                    // 0 : Everyone
                    // 1 : Forks in the same account
                    // 2 : Nobody
                }
                // Custom Github Notification Context; https://github.com/jenkinsci/github-scm-trait-notification-context-plugin
                traits << 'org.jenkinsci.plugins.githubScmTraitNotificationContext.NotificationContextTrait' {
                   contextLabel("continuous-integration/jenkins/ocp-${OCP_VERSION}")
                   typeSuffix(true)
                }
            }

              // "Project Recognizers"
            projectFactories {
                workflowMultiBranchProjectFactory {
                    scriptPath 'Jenkinsfile'
                }
            }

            // "Orphaned Item Strategy"
            orphanedItemStrategy {
              discardOldItems {
                daysToKeep(-1)
                numToKeep(-1)
              }
            }

            // "Scan Organization Folder Triggers" : 1 day
            // We need to configure this stuff by hand because JobDSL only allow 'periodic(int min)' for now
            configure { node ->
              node / triggers / 'com.cloudbees.hudson.plugins.folder.computed.PeriodicFolderTrigger' {
                spec('H H * * *')
                interval(86400000)
              }
            }

            // set webhook triggers and suppress automatic issue triggering
            // for now, we want trigger
            def commentTriggerPhrase = '^test$|^retest$|^recheck$'
            configure { node ->
              node / strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                properties(class: 'java.util.Arrays$${ESCAPEDOLLAR}ArrayList') {
                  def s = a(class: 'jenkins.branch.BranchProperty-array')
                  s / 'jenkins.branch.NoTriggerBranchProperty' {}
                  s / 'com.adobe.jenkins.github__pr__comment__build.TriggerPRCommentBranchProperty'(plugin: 'github-pr-comment-build@2.3') {
                        commentBody(commentTriggerPhrase)
                  }
                  // s / 'com.adobe.jenkins.github__pr__comment__build.TriggerPRCommentBranchProperty'
                  // s / 'com.adobe.jenkins.github__pr__comment__build.TriggerPRReviewBranchProperty'(plugin: 'github-pr-comment-build@2.3')
                }
              }
            }
          }

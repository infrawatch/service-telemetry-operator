# NOTE: be aware that if the API version changes for the ServiceTelemetry
# object that it'll need to be updated here
- name: Create default ServiceTelemetry manifest with a observabilityStrategy other than none
  ansible.builtin.set_fact:
    service_telemetry_manifest: |
      apiVersion: infra.watch/v1beta1
      kind: ServiceTelemetry
      metadata:
        name: default
        namespace: "{{ namespace }}"
      spec:
        observabilityStrategy: "{{ __service_telemetry_observability_strategy }}"
        alerting:
          alertmanager:
            storage:
              strategy: {{ "ephemeral" if __service_telemetry_storage_ephemeral_enabled else "persistent" }}
      {% if __service_telemetry_storage_persistent_storage_class is defined %}
              persistent:
                storageClass: {{ __service_telemetry_storage_persistent_storage_class }}
      {% endif %}
            receivers:
              snmpTraps:
                enabled: {{ __service_telemetry_snmptraps_enabled }}
                target: "{{ __service_telemetry_snmptraps_target }}"
                community: "{{ __service_telemetry_snmptraps_community }}"
                retries: {{ __service_telemetry_snmptraps_retries }}
                port: {{ __service_telemetry_snmptraps_port }}
                timeout: {{ __service_telemetry_snmptraps_timeout }}
                alertOidLabel: "{{ __service_telemetry_snmptraps_alert_oid_label }}"
                trapOidPrefix: "{{ __service_telemetry_snmptraps_trap_oid_prefix }}"
                trapDefaultOid: "{{ __service_telemetry_snmptraps_trap_default_oid }}"
                trapDefaultSeverity: "{{ __service_telemetry_snmptraps_trap_default_severity }}"
        backends:
          events:
            elasticsearch:
              enabled: {{ __service_telemetry_events_enabled }}
          metrics:
            prometheus:
              enabled: {{ __service_telemetry_metrics_enabled }}
              storage:
                strategy: {{ "ephemeral" if __service_telemetry_storage_ephemeral_enabled else "persistent" }}
      {% if __service_telemetry_storage_persistent_storage_class is defined %}
                persistent:
                  storageClass: {{ __service_telemetry_storage_persistent_storage_class }}
      {% endif %}
          logs:
            loki:
              enabled: false
              replicationFactor: 1
              flavor: 1x.extra-small
              storage:
                objectStorageSecret: test
      {% if __service_telemetry_storage_persistent_storage_class is defined %}
                storageClass: {{ __service_telemetry_storage_persistent_storage_class }}
      {% endif %}
        transports:
          qdr:
            enabled: true
            certificates:
              endpointCertDuration: {{ __service_telemetry_transports_certificates_endpoint_cert_duration }}
              caCertDuration: {{ __service_telemetry_transports_certificates_ca_cert_duration }}
        highAvailability:
          enabled: {{ __service_telemetry_high_availability_enabled }}
  when:
    - service_telemetry_manifest is not defined
    - __service_telemetry_observability_strategy != "none"

- name: Create default ServiceTelemetry manifest with observabilityStrategy none
  ansible.builtin.set_fact:
    service_telemetry_manifest: |
      apiVersion: infra.watch/v1beta1
      kind: ServiceTelemetry
      metadata:
        name: default
        namespace: "{{ namespace }}"
      spec:
        observabilityStrategy: none
  when:
    - service_telemetry_manifest is not defined
    - __service_telemetry_observability_strategy == "none"

- name: Show ServiceTelemetry manifest
  ansible.builtin.debug:
    var: service_telemetry_manifest | from_yaml

- name: Create ServiceTelemetry instance
  kubernetes.core.k8s:
    definition:
      '{{ service_telemetry_manifest }}'

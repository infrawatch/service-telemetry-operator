---
# tasks file for stf-run-ci

# -- initial setup
- name: Setup default values
  ansible.builtin.set_fact:
    branch: "{{ working_branch | default('master') }}"
    namespace: "{{ working_namespace | default('service-telemetry') }}"

- name: Set default image paths for local builds
  ansible.builtin.set_fact:
    sgo_image_path: "{{ __internal_registry_path }}/{{ namespace }}/smart-gateway-operator:{{ sgo_image_tag }}"
    sto_image_path: "{{ __internal_registry_path }}/{{ namespace }}/service-telemetry-operator:{{ sto_image_tag }}"
    sg_core_image_path: "{{ __internal_registry_path }}/{{ namespace }}/sg-core:{{ sg_core_image_tag }}"
    sg_bridge_image_path: "{{ __internal_registry_path }}/{{ namespace }}/sg-bridge:{{ sg_bridge_image_tag }}"
    prometheus_webhook_snmp_image_path: "{{ __internal_registry_path }}/{{ namespace }}/prometheus-webhook-snmp:{{ prometheus_webhook_snmp_image_tag }}"

- name: Set default image paths for bundle and index builds
  ansible.builtin.set_fact:
    sgo_bundle_image_path: "{{ __internal_registry_path }}/{{ namespace }}/smart-gateway-operator-bundle:{{ sgo_bundle_image_tag }}"
    sto_bundle_image_path: "{{ __internal_registry_path }}/{{ namespace }}/service-telemetry-operator-bundle:{{ sto_bundle_image_tag }}"
    stf_index_image_path: "{{ __internal_registry_path }}/{{ namespace }}/service-telemetry-framework-index:{{ stf_index_image_tag }}"

- name: Fail on mutually exclusive flags
  ansible.builtin.fail:
    msg: __deploy_from_bundles_enabled not currently supported with __local_build_enabled (but should be)
  when: __local_build_enabled | bool and __deploy_from_bundles_enabled | bool

- name: Fail when deploying from index image and local build disabled
  ansible.builtin.fail:
    msg: __deploy_from_index_enabled must also have __local_build_enabled
  when: __deploy_from_index_enabled | bool and not __local_build_enabled | bool

- name: Fail when deploying from index images and deployment from bundles also requested (mutually exclusive methods)
  ansible.builtin.fail:
    msg: __deploy_from_index_enabled can not be used with __deploy_from_bundles_enabled
  when: __deploy_from_index_enabled | bool and __deploy_from_bundles_enabled | bool

- name: Get the list of nodes
  kubernetes.core.k8s_info:
    kind: Node
  register: node_info

- name: Get OCP version
  ansible.builtin.shell: oc version -o yaml | grep openshiftVersion | awk '{print $2}'
  register: ocp_ver

- name: Find out if we are using crc by looking at the node hostnames
  ansible.builtin.set_fact:
    is_crc: "{{ True if 'crc' in node_info.resources[0].metadata.labels[\"kubernetes.io/hostname\"] else False }}"

# -- prepare environment and cleanup
- name: Clean up any existing global artifacts
  ansible.builtin.include_tasks: pre-clean.yml
  tags:
    - pre-clean

- name: Setup supporting Operator subscriptions
  ansible.builtin.include_tasks: setup_base.yml
  tags:
    - deploy

- name: Deploy ES for events testing
  ansible.builtin.include_tasks: setup_elasticsearch.yml

- name: Set default base dir if not provided
  ansible.builtin.set_fact:
    base_dir: "{{ playbook_dir }}"
  when: base_dir | length == 0

- name: Get operator_sdk_v0 (build bundles)
  ansible.builtin.command:
    cmd: "./get_operator_sdk.sh {{ operator_sdk_v0 }}"
    creates: "{{ base_dir }}/working/operator-sdk-{{ operator_sdk_v0 }}"

- name: Get operator_sdk_v1 (deploy from bundles)
  when: __local_build_enabled | bool or __deploy_from_bundles_enabled | bool or __deploy_from_index_enabled | bool
  ansible.builtin.command:
    cmd: "{{ base_dir }}/get_operator_sdk.sh {{ operator_sdk_v1 }}"
    creates: "{{ base_dir }}/working/operator-sdk-{{ operator_sdk_v1 }}"

- name: Set logfile_dir
  when: not (logfile_dir is defined)
  ansible.builtin.set_fact:
    logfile_dir: "{{ base_dir }}/working/logs"

- name: Make sure the logging dir exists
  ansible.builtin.command:
    cmd: mkdir -p {{ logfile_dir }}
    creates: "{{ logfile_dir }}"

# -- create artifacts
- when: __local_build_enabled | bool
  tags:
    - create_builds
  block:
  - name: Setup supporting repositories
    ansible.builtin.include_tasks: clone_repos.yml
    tags:
      - clone

  - name: Create base build list
    ansible.builtin.set_fact:
      build_list:
        - { name: service-telemetry-operator, dockerfile_path: build/Dockerfile, image_reference_name: sto_image_path, working_build_dir: ../ }
        - { name: smart-gateway-operator, dockerfile_path: build/Dockerfile, image_reference_name: sgo_image_path, working_build_dir: ./working/smart-gateway-operator }
        - { name: sg-core, dockerfile_path: build/Dockerfile, image_reference_name: sg_core_image_path, working_build_dir: ./working/sg-core }
        - { name: sg-bridge, dockerfile_path: build/Dockerfile, image_reference_name: sg_bridge_image_path, working_build_dir: ./working/sg-bridge }
        - { name: prometheus-webhook-snmp, dockerfile_path: Dockerfile, image_reference_name: prometheus_webhook_snmp_image_path, working_build_dir: ./working/prometheus-webhook-snmp }

  - ansible.builtin.debug:
      var: build_list

  - name: Create builds and artifacts
    ansible.builtin.include_tasks: create_builds.yml
    loop: "{{ build_list }}"
    loop_control:
      loop_var: artifact
    tags:
      - build

  - name: Setup STF using local artifacts
    ansible.builtin.include_tasks: setup_stf_local_build.yml
    tags:
      - deploy

- when: __deploy_from_index_enabled | bool or __deploy_from_bundles_enabled | bool
  name: Relax the pod security admission controls to allow local catalog index registry pods
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: baseline
          pod-security.kubernetes.io/audit: restricted
          pod-security.kubernetes.io/warn: restricted

- when: __deploy_from_index_enabled | bool
  tags:
    - create_bundles
  block:
    - name: Create base build list
      ansible.builtin.set_fact:
        bundle_build_list:
          - { name: service-telemetry-operator-bundle, dockerfile_path: Dockerfile, image_reference_name: sto_bundle_image_path, working_build_dir: ./working/service-telemetry-operator-bundle }
          - { name: smart-gateway-operator-bundle, dockerfile_path: Dockerfile, image_reference_name: sgo_bundle_image_path, working_build_dir: ./working/smart-gateway-operator-bundle }

    - ansible.builtin.debug:
        var: bundle_build_list

    - name: Create bundle builds and artifacts
      ansible.builtin.include_tasks: create_builds.yml
      loop: "{{ bundle_build_list }}"
      loop_control:
        loop_var: artifact
      tags:
        - build

    - name: Create file-based catalog
      ansible.builtin.include_tasks: create_catalog.yml

# -- deploy
- when: not __local_build_enabled | bool
  block:
  - name: Setup Service Telemetry Framework from supplied bundle URLs
    ansible.builtin.include_tasks: setup_stf_from_bundles.yml
    when: __deploy_from_bundles_enabled | bool

  - name: Setup Service Telemetry Framework from application registry
    ansible.builtin.include_tasks: setup_stf.yml
    when: not __deploy_from_bundles_enabled | bool

- when: __deploy_from_index_enabled | bool
  name: Subscribe to locally built Service Telemetry Operator
  kubernetes.core.k8s:
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        labels:
          operators.coreos.com/service-telemetry-operator.service-telemetry: ""
        name: service-telemetry-operator
        namespace: "{{ namespace }}"
      spec:
        channel: unstable
        installPlanApproval: Automatic
        name: service-telemetry-operator
        source: service-telemetry-framework-operators
        sourceNamespace: "{{ namespace }}"

# -- check if we're ready to instantiate
- name: Pre-flight checks
  ansible.builtin.include_tasks: preflight_checks.yml

# -- create a ServiceTelemetry object to stand up the STF instance
- when: __deploy_stf | bool
  block:
  - name: Deploy an instance of STF
    ansible.builtin.include_tasks: deploy_stf.yml

  - name: Validate system is operational
    ansible.builtin.shell: |
      OCP_PROJECT="{{ namespace }}" VALIDATION_SCOPE="{{ __service_telemetry_observability_strategy }}" "{{ base_dir }}/validate_deployment.sh" >> {{ logfile_dir }}/validate_deployment.log 2>&1
    args:
      executable: /bin/bash
    register: validate_deployment

  - name: Show the result of the validate_deployment script
    ansible.builtin.shell:
      cmd: |
        cat {{ logfile_dir }}/validate_deployment.log
